{"mappings":"wMAmBIA,EAAM,aAGNC,EAAU,qBAGVC,EAAU,aAGVC,EAAS,cAGTC,EAAeC,SAGfC,EAA8B,iBAAVC,GAAsBA,GAAUA,EAAOC,SAAWA,QAAUD,EAGhFE,EAA0B,iBAARC,MAAoBA,MAAQA,KAAKF,SAAWA,QAAUE,KAGxEC,EAAOL,GAAcG,GAAYG,SAAS,cAATA,GAUjCC,EAPcL,OAAOM,UAOQC,SAG7BC,EAAYC,KAAKC,IACjBC,EAAYF,KAAKG,IAkBjBC,EAAM,WACR,OAAOV,EAAKW,KAAKC,K,EAyDnB,SAASC,EAASC,EAAMC,EAAMC,GAC5B,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAAiB,EACjBC,GAAU,EACVC,GAAS,EACTC,GAAW,EAEf,GAAmB,mBAARZ,EACT,MAAM,IAAIa,UArIQ,uBA+IpB,SAASC,EAAWC,GAClB,IAAIC,EAAOb,EACPc,EAAUb,EAKd,OAHAD,EAAWC,OAAWc,EACtBT,EAAiBM,EACjBT,EAASN,EAAKmB,MAAMF,EAASD,E,CAI/B,SAASI,EAAYL,GAMnB,OAJAN,EAAiBM,EAEjBR,EAAUc,WAAWC,EAAcrB,GAE5BS,EAAUI,EAAWC,GAAQT,C,CAWtC,SAASiB,EAAaR,GACpB,IAAIS,EAAoBT,EAAOP,EAM/B,YAAyBU,IAAjBV,GAA+BgB,GAAqBvB,GACzDuB,EAAoB,GAAOb,GANJI,EAAON,GAM8BJ,C,CAGjE,SAASiB,IACP,IAAIP,EAAOnB,IACX,GAAI2B,EAAaR,GACf,OAAOU,EAAaV,GAGtBR,EAAUc,WAAWC,EAzBvB,SAAuBP,GACrB,IAEIW,EAASzB,GAFWc,EAAOP,GAI/B,OAAOG,EAASjB,EAAUgC,EAAQrB,GAHRU,EAAON,IAGkCiB,C,CAoBhCC,CAAcZ,G,CAGnD,SAASU,EAAaV,GAKpB,OAJAR,OAAUW,EAINN,GAAYT,EACPW,EAAWC,IAEpBZ,EAAWC,OAAWc,EACfZ,E,CAeT,SAASsB,IACP,IAAIb,EAAOnB,IACPiC,EAAaN,EAAaR,GAM9B,GAJAZ,EAAW2B,UACX1B,EAAW2B,KACXvB,EAAeO,EAEXc,EAAY,CACd,QAAgBX,IAAZX,EACF,OAAOa,EAAYZ,GAErB,GAAIG,EAGF,OADAJ,EAAUc,WAAWC,EAAcrB,GAC5Ba,EAAWN,E,CAMtB,YAHgBU,IAAZX,IACFA,EAAUc,WAAWC,EAAcrB,IAE9BK,C,CAIT,OAxGAL,EAAO+B,EAAS/B,IAAS,EACrBgC,EAAS/B,KACXQ,IAAYR,EAAQQ,QAEpBL,GADAM,EAAS,YAAaT,GACHX,EAAUyC,EAAS9B,EAAQG,UAAY,EAAGJ,GAAQI,EACrEO,EAAW,aAAcV,IAAYA,EAAQU,SAAWA,GAiG1DgB,EAAUM,OAnCV,gBACkBhB,IAAZX,GACF4B,aAAa5B,GAEfE,EAAiB,EACjBN,EAAWK,EAAeJ,EAAWG,OAAUW,C,EA+BjDU,EAAUQ,MA5BV,WACE,YAAmBlB,IAAZX,EAAwBD,EAASmB,EAAa7B,I,EA4BhDgC,C,CA0FT,SAASK,EAASI,GAChB,IAAIC,SAAcD,EAClB,QAASA,IAAkB,UAARC,GAA4B,YAARA,E,CA4EzC,SAASN,EAASK,GAChB,GAAoB,iBAATA,EACT,OAAOA,EAET,GAhCF,SAAkBA,GAChB,MAAuB,iBAATA,GAtBhB,SAAsBA,GACpB,QAASA,GAAyB,iBAATA,C,CAsBtBE,CAAaF,IAvXF,mBAuXYjD,EAAeoD,KAAKH,E,CA8B1CI,CAASJ,GACX,OAzZM,IA2ZR,GAAIJ,EAASI,GAAQ,CACnB,IAAIK,EAAgC,mBAAjBL,EAAMM,QAAwBN,EAAMM,UAAYN,EACnEA,EAAQJ,EAASS,GAAUA,EAAQ,GAAMA,C,CAE3C,GAAoB,iBAATL,EACT,OAAiB,IAAVA,EAAcA,GAASA,EAEhCA,EAAQA,EAAMO,QAAQrE,EAAQ,IAC9B,IAAIsE,EAAWpE,EAAWqE,KAAKT,GAC/B,OAAOQ,GAAanE,EAAUoE,KAAKT,GAC/B1D,EAAa0D,EAAMU,MAAM,GAAIF,EAAW,EAAI,GAC3CrE,EAAWsE,KAAKT,GAtab,KAsa6BA,C,CAGvCW,EA9IA,SAAkBhD,EAAMC,EAAMC,GAC5B,IAAIQ,GAAU,EACVE,GAAW,EAEf,GAAmB,mBAARZ,EACT,MAAM,IAAIa,UAnSQ,uBAySpB,OAJIoB,EAAS/B,KACXQ,EAAU,YAAaR,IAAYA,EAAQQ,QAAUA,EACrDE,EAAW,aAAcV,IAAYA,EAAQU,SAAWA,GAEnDb,EAASC,EAAMC,EAAM,CAC1BS,QAAWA,EACXL,QAAWJ,EACXW,SAAYA,G,EC5PhB,IAAIqC,EAAkB,GAEtB,MAAMC,EAAaC,SAASC,cAAc,kBACpCC,EAAaF,SAASC,cAAc,2BAE1CF,EAAWI,iBAAiB,UAI5B,SACSC,GACPA,EAAIC,iBAC0CP,EAA5B,GAClBQ,QAAQC,IAAI,oBACGH,EAAXI,cAAcC,QACsDC,aAA3DC,WAhBK,sB,IAOKT,EAAdC,iBAAiB,QAASS,EAAAf,EAAA,EAcrC,SACSO,GACP,MAAMlB,EAAQkB,EAAIS,OAAO3B,MAC+JwB,aAA3KI,QAxBK,sBAwBgB5B,GAGlCoB,QAAQC,IAAIrB,E,GApBiD,MAuB/D,WAEE,IAAI6B,EAAmBL,aAAaM,QAhClB,uBAiCdD,IACFA,EAAmBE,KAAKC,MAAMH,GAC9BT,QAAQC,IAAIQ,GACZnF,OAAOuF,QAAQJ,GAAkBK,SAAQ,EAAEC,EAAMnC,MAC/CY,EAAgBuB,GAAQnC,EACxBa,EAAWuB,SAASD,GAAMnC,MAAQA,CAAK,I,CA7B1BqC,GA0CnBxB,EAAWI,iBAAiB,SAC5B,SAAkBqB,GAChB1B,EAAgB0B,EAAEX,OAAOQ,MAAQG,EAAEX,OAAO3B,MACiBwB,aAA9CI,QAtDK,sBAsDgBG,KAAKQ,UAAU3B,IACjDQ,QAAQC,IAAIT,E","sources":["node_modules/lodash.throttle/index.js","src/js/03-feedback.js"],"sourcesContent":["/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Creates a throttled function that only invokes `func` at most once per\n * every `wait` milliseconds. The throttled function comes with a `cancel`\n * method to cancel delayed `func` invocations and a `flush` method to\n * immediately invoke them. Provide `options` to indicate whether `func`\n * should be invoked on the leading and/or trailing edge of the `wait`\n * timeout. The `func` is invoked with the last arguments provided to the\n * throttled function. Subsequent calls to the throttled function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the throttled function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.throttle` and `_.debounce`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to throttle.\n * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=true]\n *  Specify invoking on the leading edge of the timeout.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new throttled function.\n * @example\n *\n * // Avoid excessively updating the position while scrolling.\n * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n *\n * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n * jQuery(element).on('click', throttled);\n *\n * // Cancel the trailing throttled invocation.\n * jQuery(window).on('popstate', throttled.cancel);\n */\nfunction throttle(func, wait, options) {\n  var leading = true,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  if (isObject(options)) {\n    leading = 'leading' in options ? !!options.leading : leading;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n  return debounce(func, wait, {\n    'leading': leading,\n    'maxWait': wait,\n    'trailing': trailing\n  });\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = throttle;\n","import throttle from \"lodash.throttle\";\n// 1. Отслеживай на форме событие input, и каждый раз записывай в локальное хранилище объект с полями email и message, в которых сохраняй текущие значения полей формы. Пусть ключом для хранилища будет строка \"feedback-form-state\".\n// 2. При загрузке страницы проверяй состояние хранилища, и если там есть сохраненные данные, заполняй ими поля формы. В противном случае поля должны быть пустыми.\n// 3. При сабмите формы очищай хранилище и поля формы, а также выводи объект с полями email, message и текущими их значениями в консоль.\n// 4. Сделай так, чтобы хранилище обновлялось не чаще чем раз в 500 миллисекунд. Для этого добавь в проект и используй библиотеку lodash.throttle.\n// const STORAGE_KEY = 'feedback-form-state';\n// let selectedFilters = {};\n\n// const filterForm = document.querySelector('.feedback-form');\n// const textareaEl = document.querySelector('.feedback-form textarea')\n\n// filterForm.addEventListener('submit', onFormSubmit); /* повешали слушатель на кнопку */\n// textareaEl.addEventListener('input', throttle(onTextareaInput, 1000)); /* повешали слушатель на  */\n\n// populateTextarea();\n\n// function onFormSubmit(evt) { /* Отправка формы. Останавливаем поведение по умолчанию. Убираем сообщение из хранилища. Очищаем форму. */\n//   evt.preventDefault(); /* Запрет поведения по умолчанию, перезагрузку страницы */\n//   console.log('Отправляем форму');\n//   evt.currentTarget.reset(); /* reset() сбрасывает значение input (очищаем поля) в форме после отправки, evt.currentTarget - это форма, потому что onFormSubmit висит на filterForm.addEventListener */\n//   localStorage.removeItem(STORAGE_KEY); /* Очищение localStorage после отправки формы, передаем ключ */\n// };\n// console.log(onFormSubmit);\n\n// function onTextareaInput(evt) { /* Получаем значение поля, сохраняем его в хранилище. Берем то что находится в value нашего input и записываем в localStorage */\n//   const value = evt.target.value; /* События всплывают и функция onTextareaInput выполняется отложено каждые 1000 мс, поэтому когда сработало события и вызвалась функция это разное время, поэтому в\n//   evt.currentTarget будет лежать много чего, и в консоле будет выдавать ошибки throttle, а evt.target никогда не меняется */\n//   console.log(value);\n//   localStorage.setItem(STORAGE_KEY, value); /* при каждом нажатии клавиши делаем setItem в этот ключ в это значение value */\n// //   selectedFilters[evt.target.name] = evt.target.value;\n// //   localStorage.setItem(STORAGE_KEY, JSON.stringify(selectedFilters));\n// };\n\n// function populateTextarea() { /* Получаем значение из хранилища. Если были данны обновляем ДОМ. Будет вызываться при загрузке страницы */\n//   const savedMessage = localStorage.getItem(STORAGE_KEY); /* Получаем значение из localStorage, не можем запихнуть в input в textarea, если локал уже что-то есть, то будет значение в консоли, а если первый раз ввошли то отобразит null, поэтому проверяем, а есть ли там что-то */\n//   if (savedMessage) { /* если в localStorage нету такого ключа то нам вернется null, поэтому проверяем есть там что-то есть - приводит к true, то тогда можем с ним работать там какие-то данные, в противном ничего не делаем */\n//     console.log(savedMessage);\n//     textareaEl.value = savedMessage; /* Обновляем ДОМ, берем textarea, записываем ей value */\n//   }\n// }\n\n\n// filterForm.addEventListener('input', e => { /* Делегирование. На форму вешаем прослушивание input */\n//   selectedFilters[e.target.name] = e.target.value; /* в объкт selectedFilters с ключем [e.target.name] ложим значение e.target.value - это реализация localStorage, но объект будем класть в localStorage */\n//   console.log(selectedFilters);\n//   // console.log(e.target.name); /* у каждого target будет name */\n//   // console.log(e.target.value); /* у каждого target будет value */\n// });\n\n\n\n\n\n\n\n\n\nconst STORAGE_KEY = 'feedback-form-state';\nlet selectedFilters = {};\n\nconst filterForm = document.querySelector('.feedback-form');\nconst textareaEl = document.querySelector('.feedback-form textarea')\n\nfilterForm.addEventListener('submit', onFormSubmit); /* повешали слушатель на кнопку */\ntextareaEl.addEventListener('input', throttle(onTextareaInput, 1000)); /* повешали слушатель на input */\n\npopulateTextarea();\n/* +++++++++++++++++++++++ОТПРАВКА/ЧИСТКА ФОРМЫ+++++++++++++++++++ */\nfunction onFormSubmit(evt) { /* Отправка формы. Останавливаем поведение по умолчанию. Убираем сообщение из хранилища. Очищаем форму. */\n  evt.preventDefault(); /* Запрет поведения по умолчанию, перезагрузку страницы */\n  selectedFilters = {};\n  console.log('Отправляем форму');\n  evt.currentTarget.reset(); /* reset() сбрасывает значение input (очищаем поля) в форме после отправки, evt.currentTarget - это форма, потому что onFormSubmit висит на filterForm.addEventListener */\n  localStorage.removeItem(STORAGE_KEY); /* Очищение localStorage после отправки формы, передаем ключ */\n  // inputEl.removeEventListener();\n};\n// console.log(onFormSubmit);\n\n/*--------------------СЛУШАТЕЛЬ СОБЫТИЙ, пока убираем---------------------------- */\nfunction onTextareaInput(evt) { /* Получаем значение поля, сохраняем его в хранилище. Берем то что находится в value нашего input и записываем в localStorage */\n  const value = evt.target.value; /* События всплывают и функция onTextareaInput выполняется отложено каждые 1000 мс, поэтому когда сработало события и вызвалась функция это разное время, поэтому в evt.currentTarget будет лежать много чего, и в консоле будет выдавать ошибки throttle, а evt.target никогда не меняется */\n  localStorage.setItem(STORAGE_KEY, value); /* при каждом нажатии клавиши делаем setItem в этот ключ в это значение value */\n//   selectedFilters[evt.target.name] = evt.target.value;\n//   localStorage.setItem(STORAGE_KEY, JSON.stringify(selectedFilters));\n  console.log(value);\n};\n\n/*++++++++++++++++++++++++++ДАННЫЕ ИЗ ЛОКАЛ.ХРАНИЛИЩА+++++++++++++++++++++++ */\nfunction populateTextarea() { /* Получаем значение из хранилища. Если были данны обновляем ДОМ. Будет вызываться при загрузке страницы */\n  let persistedFilters = localStorage.getItem(STORAGE_KEY); /* Получаем значение из localStorage, не можем запихнуть в input в textarea, если локал уже что-то есть, то будет значение в консоли, а если первый раз ввошли то отобразит null, поэтому проверяем, а есть ли там что-то */\n  if (persistedFilters) { /* если в localStorage нету такого ключа то нам вернется null, поэтому проверяем есть там что-то есть - приводит к true, то тогда можем с ним работать там какие-то данные, в противном ничего не делаем */\n    persistedFilters = JSON.parse(persistedFilters);\n    console.log(persistedFilters);\n    Object.entries(persistedFilters).forEach(([name, value]) => {\n      selectedFilters[name] = value;\n      filterForm.elements[name].value = value; /* Обновляем ДОМ, берем textarea, записываем ей value */\n    })\n    \n  }\n}\n\n/*--------------------ДЕЛЕГИРОВАНИЕ ФОРМЫ_Слушатель на общий контейнер---------------------------- */\n// filterForm.addEventListener('input', e => { /* Делегирование. На форму вешаем прослушивание input */\n//   selectedFilters[e.target.name] = e.target.value; /* в объкт selectedFilters с ключем [e.target.name] ложим значение e.target.value - это реализация localStorage, но объект будем класть в localStorage */\n//   localStorage.setItem(STORAGE_KEY, JSON.stringify(selectedFilters));\n//   console.log(selectedFilters);\n// });\n\nfilterForm.addEventListener('input', inputEl);\nfunction inputEl (e) { /* Делегирование. На форму вешаем прослушивание input */\n  selectedFilters[e.target.name] = e.target.value; /* в объкт selectedFilters с ключем [e.target.name] ложим значение e.target.value - это реализация localStorage, но объект будем класть в localStorage */\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(selectedFilters));\n  console.log(selectedFilters);\n};\n\n\n// filterForm.removeEventListener('input', inputEl);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// const filterForm = document.querySelector('.feedback-form');\n// const STORAGE_KEY = 'feedback-form-state';\n// let selectedFilters = {};\n// initForm(); /* Инициализируем форму. */\n\n// filterForm.addEventListener('submit', evt => { /* слушатель на submit */\n//   evt.preventDefault(); /* чтоб не перезагружалось */\n//   console.log(filterForm.elements); /* элементы формы */\n//   const formData = new FormData(filterForm); /* ссылка на саму форму. FormData автоматически при сабмите собирает все значения полей в форме интерактивно, это не оюъект, а итерируемая сущность  */\n//   console.log(formData)\n//   formData.forEach((value, name) => console.log(value, name)); /* у FormData на прототипе есть forEach у которого FormDataEntryValue первым идет value(значение элемента фор), а вторым key(имя элемента фор) */\n// });\n\n// filterForm.addEventListener('change', evt => { /* Делегирование. Слушатель на общий контейнер,и внутри этого слушателя по evt.target прослушиваем события.У каждого селекта есть событие как change, вешаем на форму */\n//   selectedFilters[evt.target.name] = evt.target.value; /* когда будем чендить, в объект пустой selectedFilters -> имя ключа [evt.target.name] и значением ставим evt.target.value. [evt.target.name] берем значение свойства name у evt.target как строку и обращаемся к свойству, єто динамическое значение ключей которого названий не знаем */\n//   localStorage.setItem(STORAGE_KEY, JSON.stringify(selectedFilters)); /* При перезагрузке страницы сохранияем данные в локальном хранилище. Когда объект приводится из коробки к строке используем JSON.stringify чтоб привести к строке */\n\n// });\n\n// filterForm.addEventListener('reset', evt => { /* Есть глобальная форма reset */\n  // selectedFilters = {}; /* selectedFilters очищаем, когда сабмитим формы, хотим сбросить фильтры */\n  // localStorage.removeItem(STORAGE_KEY) /* Из локального хранилица removeItem очищает данные */\n// }\n\n\n// function initForm() { /* Инициализируем форму. Вытягиваем фильтры из localStorage */\n//   let persistedFilters = localStorage.getItem(STORAGE_KEY); /* при выполнении функции initForm мы взяли фильтры, но они в виде строки {'size': 'xl'}, нфдо распарсить */\n//   if (persistedFilters) { /* если данные есть в localStorage, а не null, то тогда начинаем с ними работать  */\n//     persistedFilters = JSON.parse(persistedFilters); /* парсим данные и получаем объект с фильтрами и имена свойст  совпадают с именами селекторов (name)*/\n//     console.log(persistedFilters);\n//     Object.entries(persistedFilters).forEach(([name, value]) => { /* Проходимся по объектам ключей, берем Object.entries (так как у нас и имя и значение) и перебираем, каждая запись это массив из имя ключа и имя значения из forEach(entry) деструктуризируем в forEach(([name, value]) */\n//       selectedFilters[name] = value; /* наполняем выбраные фильтры с сохраненных объекто в localStorage после перезагрузки страницы */\n//       filterForm.elements[name].value = value; /* на фильтр filterForm.elements обращаемся к элементу с таким именем name и в его свойство value помещаем текущее значение фильтра */\n//     })\n//   }\n// }\n\n\n\n/* Если хотим убрать глобальную переменную selectedFilters, мы дублируем и храним в памяти фильтры и + хотим хранить фильтры в локальном хранилище, вносим изменения.\nПеременная selectedFilters позволяет без чтения localStorage изменять объект и потом в localStorage записывать, но так же ее приходится сбрасывать и инициализировать каждый раз. \n\n- в initForm() инициализируем\n- filterForm.addEventListener('reset' - сбрасываем selectedFilters\nВезде ее убираем */\n\n// const filterForm = document.querySelector('.feedback-form');\n// const STORAGE_KEY = 'feedback-form-state';\n// let selectedFilters = {}; УДАЛЯЕМ\n// initForm(); \n\n// filterForm.addEventListener('submit', evt => {\n//   evt.preventDefault();\n//   console.log(filterForm.elements);\n//   const formData = new FormData(filterForm);\n//   console.log(formData)\n//   formData.forEach((value, name) => console.log(value, name));\n// });\n\n// filterForm.addEventListener('change', evt => {\n//   selectedFilters[evt.target.name] = evt.target.value; УДАЛЯЕМ\n//   localStorage.setItem(STORAGE_KEY, JSON.stringify(selectedFilters)); УДАЛЯЕМ\n// let persistedFilters = localStorage.getItem(STORAGE_KEY) /* При изменении фильтра надо прочитать из локального хранилища, посмотреть есть ли там объект (пишем localStorage.getItem), как-то его изменить и потом его заново сохранить в локал.хранилище */\n/* отобразит null, если фильтры не были сохранены в localStorage, то инициализируем пустой объект, если были сохранены ранее то их парсим */\n\n// if(persistedFilters) { /* если persistedFilters есть, то... */\n  // persistedFilters = JSON.parse(persistedFilters); /* парсим persistedFilters */\n// } else { /* если нет, сохранится пустой объект */\n  // persistedFilters = {};\n// }\n// \n// -----можно if заменить тернарником:\n//  persistedFilters = persistedFilters ? JSON.parse(persistedFilters) : {};\n// persistedFilters[evt.target.name] = evt.target.value; /* возьми свойство [evt.target.name] и запиши в такое значение evt.target.value */\n// localStorage.setItem(STORAGE_KEY, JSON.stringify(persistedFilters)); /* после чего кидаем в локальное хранилище (persistedFilters[evt.target.name] = evt.target.value) */\n// console.log(persistedFilters);\n// });\n/* каждый раз когда выбираем новую опцию в селекте, берем из (let persistedFilters = localStorage.getItem(STORAGE_KEY)) то что было ранее сохранено, если там что-то есть (persistedFilters = persistedFilters ? JSON.parse(persistedFilters) : {};) парсим его, если нету ничего, начинаем с пустого объкта. Потом записываем ([evt.target.name]) и (evt.target.value) или изменяем старый или дописываем в новый и потом обратно кидаем в локальное хранилище (localStorage.setItem(STORAGE_KEY, JSON.stringify(persistedFilters)))*/\n\n// filterForm.addEventListener('reset', () => {\n  // selectedFilters = {}; УДАЛЯЕМ\n  // localStorage.removeItem(STORAGE_KEY)\n// }\n\n// function initForm() {\n//   let persistedFilters = localStorage.getItem(STORAGE_KEY);\n//   if (persistedFilters) {\n//     persistedFilters = JSON.parse(persistedFilters);\n//     console.log(persistedFilters);\n//     Object.entries(persistedFilters).forEach(([name, value]) => {\n//       selectedFilters[name] = value; УДАЛЯЕМ\n//       filterForm.elements[name].value = value;\n//     })\n//   }\n// }\n\n\n// Функцию можно записать:\n// 1.\n// filterForm.addEventListener('change', evt => {\n// let persistedFilters = localStorage.getItem(STORAGE_KEY)\n//  persistedFilters = persistedFilters ? JSON.parse(persistedFilters) : {};\n// persistedFilters[evt.target.name] = evt.target.value;\n// localStorage.setItem(STORAGE_KEY, JSON.stringify(persistedFilters));\n// });\n\n// 2.\n// filterForm.addEventListener('change', onChangeFilter)\n// function onChangeFilter (evt) {\n// let persistedFilters = localStorage.getItem(STORAGE_KEY)\n//  persistedFilters = persistedFilters ? JSON.parse(persistedFilters) : {};\n// persistedFilters[evt.target.name] = evt.target.value;\n// localStorage.setItem(STORAGE_KEY, JSON.stringify(persistedFilters));\n// });"],"names":["$7244391317ff913c$var$reTrim","$7244391317ff913c$var$reIsBadHex","$7244391317ff913c$var$reIsBinary","$7244391317ff913c$var$reIsOctal","$7244391317ff913c$var$freeParseInt","parseInt","$7244391317ff913c$var$freeGlobal","$parcel$global","Object","$7244391317ff913c$var$freeSelf","self","$7244391317ff913c$var$root","Function","$7244391317ff913c$var$objectToString","prototype","toString","$7244391317ff913c$var$nativeMax","Math","max","$7244391317ff913c$var$nativeMin","min","$7244391317ff913c$var$now","Date","now","$7244391317ff913c$var$debounce","func","wait","options","lastArgs","lastThis","maxWait","result1","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","TypeError","invokeFunc","time","args","thisArg","undefined","apply","leadingEdge","setTimeout","timerExpired","shouldInvoke","timeSinceLastCall","trailingEdge","result","remainingWait","debounced","isInvoking","arguments","this","$7244391317ff913c$var$toNumber","$7244391317ff913c$var$isObject","cancel","clearTimeout","flush","value","type","$7244391317ff913c$var$isObjectLike","call","$7244391317ff913c$var$isSymbol","other","valueOf","replace","isBinary","test","slice","$7244391317ff913c$exports","$945622fd0f572e60$var$selectedFilters","$945622fd0f572e60$var$filterForm","document","querySelector","$945622fd0f572e60$var$textareaEl","addEventListener","evt","preventDefault","console","log","currentTarget","reset","localStorage","removeItem","$parcel$interopDefault","target","setItem","persistedFilters","getItem","JSON","parse","entries","forEach","name","elements","$945622fd0f572e60$var$populateTextarea","e","stringify"],"version":3,"file":"03-feedback.fbfb4b05.js.map"}